plugins {
    id 'java-gradle-plugin'
    id 'com.github.johnrengelman.plugin-shadow' version '2.0.3'
    id 'groovy'
    id "com.gradle.plugin-publish" version "0.10.0"
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.20.0"
    id 'com.github.jk1.dependency-license-report' version '1.3'
    id "com.github.hierynomus.license" version "0.15.0"
    id "org.asciidoctor.convert" version "2.0-alpha.5"
    id "org.ajoberstar.git-publish" version "2.0.0"
}

project.version.with {
    major = badassJlinkPluginVersionMajor as int
    minor= badassJlinkPluginVersionMinor as int
    patch = badassJlinkPluginVersionPatch as int
    if (project.hasProperty('badassJlinkPluginVersionLabel')) {
        preRelease = badassJlinkPluginVersionLabel
    }
    releaseBuild = Boolean.valueOf(badassJlinkPluginReleaseBuild)
}
ext.badassJlinkPluginVersion = project.version as String
ext.badassJlinkPluginTag = Boolean.valueOf(badassJlinkPluginReleaseBuild) ? "v$ext.badassJlinkPluginVersion" : 'master'

group = 'org.beryx'
version = badassJlinkPluginVersion

ext.asmVersion = '6.2.1'

repositories {
    jcenter()
    mavenCentral()
}

sourceCompatibility = 1.8

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

[compileGroovy, compileTestGroovy]*.options*.encoding = defaultEncoding
[compileGroovy, compileTestGroovy]*.groovyOptions*.encoding = defaultEncoding

task licenseCheckGroovy(type: com.hierynomus.gradle.license.tasks.LicenseCheck) {
    source = fileTree(dir: "src").include("**/*.groovy")
}
tasks.license.dependsOn licenseCheckGroovy

license {
    header rootProject.file("license-header.txt")
    skipExistingHeaders true
    ignoreFailures false
    excludes (['**/*.properties', '**/*.txt', '**/hello*/'])
}

configurations {
    compile {transitive = true}
}

dependencies {
    shadow gradleTestKit()
    shadow localGroovy()

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    compile "org.ow2.asm:asm:$asmVersion"
    compile "org.ow2.asm:asm-commons:$asmVersion"
    compile "org.ow2.asm:asm-tree:$asmVersion"
    compile "org.ow2.asm:asm-util:$asmVersion"
    compile "org.ow2.asm:asm-analysis:$asmVersion"

    testCompile('org.spockframework:spock-core:1.2-groovy-2.5') {
        exclude module: 'groovy-all'
    }
    testCompile 'cglib:cglib-nodep:3.2.9'
    testCompile 'org.objenesis:objenesis:3.0.1'
    testCompile('com.athaydes:spock-reports:1.6.1') { transitive = false}

    asciidoctor 'com.bmuschko:asciidoctorj-tabbed-code-extension:0.1'}

gradlePlugin {
    plugins {
        jlink {
            id = 'org.beryx.jlink'
            implementationClass = 'org.beryx.jlink.JlinkPlugin'
        }
    }
}
pluginBundle {
    website = 'https://github.com/beryx/badass-jlink-plugin/'
    vcsUrl = 'https://github.com/beryx/badass-jlink-plugin'
    description = 'A Gradle plugin that assembles your modules into a custom runtime image'
    tags = ['jlink', 'jpms', 'image']

    plugins {
        jlink {
            id = 'org.beryx.jlink'
            displayName = 'Badass JLink Plugin'
        }
    }
}


jar {
    manifest {
        attributes 'Implementation-Title': "${project.archivesBaseName}",
                'Implementation-Version': badassJlinkPluginVersion
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

asciidoctor {
    sourceDir = file("doc")
    sources {include 'index.adoc'}
    logDocuments = true
    attributes 'source-highlighter': 'coderay',
            'coderay-linenums-mode': 'table',
            icons: 'font',
            imagesdir: 'img',
            'data-uri': '',
            linkattrs: true,
            linkcss: true,
            'git-tag': badassJlinkPluginTag,
            'blob-root': "https://github.com/beryx/badass-jlink-plugin/blob/$badassJlinkPluginTag"
}

gitPublish {
    repoUri = 'https://github.com/beryx/badass-jlink-plugin.git'
    branch = 'gh-pages'

    contents {
        def pgType = project.hasProperty('ghPageType') ? ghPageType : 'latest'
        if(pgType == 'init') {
            from file("ghpages")
        } else if(pgType == 'list') {
            from file("build/release-list")
        } else {
            from file("${asciidoctor.outputDir.path}/html5")
            from file("build/docs")
        }
        def docDir = Boolean.valueOf(badassJlinkPluginReleaseBuild) ? 'releases' : 'snapshots'
        if(pgType == 'init') {
            into "."
        } else if(pgType == 'list') {
            into "."
            preserve {
                include '**'
                exclude "releases.md"
            }
        } else if(pgType == 'version') {
            gitPublishPush.enabled = (docDir != 'snapshots')
            into "$docDir/$badassJlinkPluginVersion"

            preserve {
                include '**'
                exclude "$docDir/$badassJlinkPluginVersion"
            }
        } else {
            into "$docDir/latest"

            preserve {
                include '**'
                exclude "$docDir/latest"
            }
        }
    }
}
